package smartcookerDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.smartcooker.app.dal.model.MyObjectConverent;
import java.util.TreeMap;

import com.example.smartcooker.app.dal.model.RecipeDetailModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE_DETAIL_MODEL".
*/
public class RecipeDetailModelDao extends AbstractDao<RecipeDetailModel, Long> {

    public static final String TABLENAME = "RECIPE_DETAIL_MODEL";

    /**
     * Properties of entity RecipeDetailModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecipeId = new Property(0, Long.class, "recipeId", true, "_id");
        public final static Property Image = new Property(1, String.class, "image", false, "IMAGE");
        public final static Property Score = new Property(2, float.class, "score", false, "SCORE");
        public final static Property Time = new Property(3, float.class, "time", false, "TIME");
        public final static Property Source = new Property(4, String.class, "source", false, "SOURCE");
        public final static Property Other = new Property(5, String.class, "other", false, "OTHER");
        public final static Property Map = new Property(6, String.class, "map", false, "MAP");
    }

    private final MyObjectConverent mapConverter = new MyObjectConverent();

    public RecipeDetailModelDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeDetailModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE_DETAIL_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: recipeId
                "\"IMAGE\" TEXT," + // 1: image
                "\"SCORE\" REAL NOT NULL ," + // 2: score
                "\"TIME\" REAL NOT NULL ," + // 3: time
                "\"SOURCE\" TEXT," + // 4: source
                "\"OTHER\" TEXT," + // 5: other
                "\"MAP\" TEXT);"); // 6: map
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE_DETAIL_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecipeDetailModel entity) {
        stmt.clearBindings();
 
        Long recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindLong(1, recipeId);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
        stmt.bindDouble(3, entity.getScore());
        stmt.bindDouble(4, entity.getTime());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(6, other);
        }
 
        TreeMap map = entity.getMap();
        if (map != null) {
            stmt.bindString(7, mapConverter.convertToDatabaseValue(map));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecipeDetailModel entity) {
        stmt.clearBindings();
 
        Long recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindLong(1, recipeId);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
        stmt.bindDouble(3, entity.getScore());
        stmt.bindDouble(4, entity.getTime());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(6, other);
        }
 
        TreeMap map = entity.getMap();
        if (map != null) {
            stmt.bindString(7, mapConverter.convertToDatabaseValue(map));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecipeDetailModel readEntity(Cursor cursor, int offset) {
        RecipeDetailModel entity = new RecipeDetailModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // recipeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image
            cursor.getFloat(offset + 2), // score
            cursor.getFloat(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // other
            cursor.isNull(offset + 6) ? null : mapConverter.convertToEntityProperty(cursor.getString(offset + 6)) // map
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecipeDetailModel entity, int offset) {
        entity.setRecipeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScore(cursor.getFloat(offset + 2));
        entity.setTime(cursor.getFloat(offset + 3));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOther(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMap(cursor.isNull(offset + 6) ? null : mapConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecipeDetailModel entity, long rowId) {
        entity.setRecipeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecipeDetailModel entity) {
        if(entity != null) {
            return entity.getRecipeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecipeDetailModel entity) {
        return entity.getRecipeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
