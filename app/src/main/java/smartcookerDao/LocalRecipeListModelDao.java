package smartcookerDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.smartcooker.app.dal.model.LocalRecipeListModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_RECIPE_LIST_MODEL".
*/
public class LocalRecipeListModelDao extends AbstractDao<LocalRecipeListModel, Long> {

    public static final String TABLENAME = "LOCAL_RECIPE_LIST_MODEL";

    /**
     * Properties of entity LocalRecipeListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Image_left = new Property(1, String.class, "image_left", false, "IMAGE_LEFT");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Like = new Property(3, int.class, "like", false, "LIKE");
        public final static Property Image_right = new Property(4, String.class, "image_right", false, "IMAGE_RIGHT");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
    }


    public LocalRecipeListModelDao(DaoConfig config) {
        super(config);
    }
    
    public LocalRecipeListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_RECIPE_LIST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMAGE_LEFT\" TEXT," + // 1: image_left
                "\"NAME\" TEXT," + // 2: name
                "\"LIKE\" INTEGER NOT NULL ," + // 3: like
                "\"IMAGE_RIGHT\" TEXT," + // 4: image_right
                "\"TIME\" TEXT);"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_RECIPE_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalRecipeListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String image_left = entity.getImage_left();
        if (image_left != null) {
            stmt.bindString(2, image_left);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getLike());
 
        String image_right = entity.getImage_right();
        if (image_right != null) {
            stmt.bindString(5, image_right);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalRecipeListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String image_left = entity.getImage_left();
        if (image_left != null) {
            stmt.bindString(2, image_left);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getLike());
 
        String image_right = entity.getImage_right();
        if (image_right != null) {
            stmt.bindString(5, image_right);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalRecipeListModel readEntity(Cursor cursor, int offset) {
        LocalRecipeListModel entity = new LocalRecipeListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image_left
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // like
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image_right
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalRecipeListModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImage_left(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLike(cursor.getInt(offset + 3));
        entity.setImage_right(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalRecipeListModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalRecipeListModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalRecipeListModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
